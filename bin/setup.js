const fs = require("fs");
const path = require("path");
const { execSync } = require("child_process");

// thanks https://stackoverflow.com/a/26227660/19678893
const appdata_root = process.env.APPDATA || (process.platform === "darwin" ? process.env.HOME + "/Library/Application Support" : process.env.HOME + "/.config");

// returns the path relative to the appdata root directory
const appdata = (in_path) => {
    return path.join(appdata_root, in_path);
}

const data_dir = appdata("pi-tray");
const in_data_dir = (in_path) => {
    return path.join(data_dir, in_path);
}


const plugin_env = in_data_dir("plugin-env");
const in_plugin_env = (in_path) => {
    return path.join(plugin_env, in_path);
}

const package_json_path = in_plugin_env("package.json");
const readme_path = in_plugin_env("README.txt");

const builtin_package = "https://github.com/Pi-Tray/builtin-plugins.git";

// TODO: ask user if they want to install additional plugins

const readme_content = `plugin-env
=============

This is the directory where Pi-Tray loads its plugins from. It is generated by the setup script and is
the place where users can add their own plugins without having to worry about committing them to the repository. It also
allows the Pi-Tray Editor program to manage plugins without needing to locate the server directory.

You should ensure you install plugins in this directory, not in the server directory.

You should only install plugins as dependencies of this directory, not any other module. If you do, you might confuse
the editor into thinking your modules are plugins!
`;

try {
    if (!fs.existsSync(plugin_env)) {
        fs.mkdirSync(plugin_env, { recursive: true });
        console.log("Created plugin-env directory:", plugin_env);
    }

    // write dummy package.json to tell npm this is a subpackage
    // TODO: ensure package.json isnt overwritten if it already exists and is valid
    fs.writeFileSync(package_json_path, "{}", "utf8");
    console.log("Wrote package.json to plugin-env");

    // install builtin plugins
    // TODO: offer to use yarn / pnpm? would need to ensure any code to read plugins is also compatible with those managers
    execSync(`npm install ${builtin_package}`, { cwd: plugin_env, stdio: "inherit" });
    console.log("Installed builtin plugins");

    // write readme
    fs.writeFileSync(readme_path, readme_content, "utf8");
    console.log("Wrote README.txt to plugin-env");

    console.log("Setup complete");
} catch (err) {
    console.error("Error during setup:", err);
    process.exit(1);
}
